---
import type { Post } from '@/types';
import { getFormattedDate } from '@/utils/date';
import { Picture } from '@astrojs/image/components';
import { Icon } from 'astro-icon';
import CustomLink from '../common/CustomLink.astro';
import IconBadge from '../project/IconBadge.astro';

export interface Props {
  post: Post;
}
const { post } = Astro.props;
---

<article>
  <header class="mx-auto mb-6 space-y-4 border-b-2">
    {
      post.thumbnail && (
        <Picture
          src={post.thumbnail}
          class="mx-auto my-6 max-w-full rounded-md bg-gray-400 sm:rounded-md "
          widths={[400, 900]}
          sizes="(max-width: 900px) 400px, 900px"
          alt={post.description || ''}
          loading="eager"
          aspectRatio={16 / 9}
          width={900}
          loading="eager"
          decoding="async"
          background={undefined}
        />
      )
    }
    <h1>
      {post.title}
    </h1>
    <div class="flex flex-row items-center justify-start gap-2">
      <Icon name="tabler:clock" class="w-5 h-5 inline-block" />
      <time datetime={String(post.publishDate)}>{getFormattedDate(post.publishDate)}</time>
      {
        post.category && (
          <>
            ·
            <Icon name="mdi:tag-text-outline" class="inline-block h-5 w-5" />
            <p class="capitalize">{post.category}</p>
          </>
        )
      }
      {post.readingTime && <> · {post.readingTime} minute </>}
    </div>
    {
      post.icons && (
        <div class="flex flex-row flex-wrap items-center gap-2">
          {post.icons.map((icon) => (
            <IconBadge label={icon} />
          ))}
        </div>
      )
    }
    {post.description && <p class="text-gray-500 dark:text-gray-400">{post.description}</p>}

    <div class="flex flex-col sm:gap-4 lg:gap-6">
      {
        post.demoUrl && (
          <div class="flex flex-col items-start gap-2 sm:flex-row  sm:items-center">
            <p class="font-bold tracking-tighter">Demo:</p>
            <CustomLink href={post.demoUrl}>{post.demoUrl}</CustomLink>
          </div>
        )
      }
      {
        post.repoUrl && (
          <div class="flex flex-col items-start gap-2 sm:flex-row  sm:items-center">
            <p class="font-bold tracking-tighter">Repo:</p>
            <CustomLink href={post.repoUrl}>{post.repoUrl}</CustomLink>
          </div>
        )
      }
    </div>
  </header>
  <div
    class="prose prose-slate mx-auto max-w-none pb-4 dark:prose-invert md:prose-lg prose-headings:scroll-mt-20 prose-headings:font-bold prose-headings:leading-tight prose-headings:tracking-tighter prose-img:rounded-md prose-img:shadow-lg"
  >
    {
      post.Content ? (
        <>
          {/* @ts-ignore */}
          <post.Content />
        </>
      ) : (
        <Fragment set:html={post.content} />
      )
    }
  </div>
</article>
